<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://otirik-handi.github.io/</id>
    <title>Otirik&apos;s Blog</title>
    <updated>2021-07-29T09:41:40.139Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://otirik-handi.github.io/"/>
    <link rel="self" href="https://otirik-handi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://otirik-handi.github.io/images/avatar.png</logo>
    <icon>https://otirik-handi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Otirik&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[JavaScript学习笔记(手写promise)]]></title>
        <id>https://otirik-handi.github.io/post/js_note/</id>
        <link href="https://otirik-handi.github.io/post/js_note/">
        </link>
        <updated>2021-07-29T08:36:57.000Z</updated>
        <content type="html"><![CDATA[<p>废话不多说, 直接上代码.</p>
<pre><code class="language-javascript">class MyPromise {

  static PENDING = &quot;pending&quot;

  static FULFILLED = &quot;fulfilled&quot;

  static REJECTED = &quot;rejected&quot;

  constructor(executor) {
    this.status = MyPromise.PENDING
    this.value = null
    this.callbacks = []
    try { // 捕获执行者出现错误
      executor(this.resovle.bind(this), this.reject.bind(this)) // 绑定this
    } catch (error) {
      this.reject(error)
    }
  }

  resovle(value) {
    if (this.status === MyPromise.PENDING) { // 状态保护
      this.status = MyPromise.FULFILLED
      this.value = value
      setTimeout(() =&gt; {
        this.callbacks.map(callback =&gt; {
          callback.onFulfilled(value)
        })
      })
    }
  }

  reject(reason) {
    if (this.status == MyPromise.PENDING) { // 状态保护
      this.status = MyPromise.REJECTED
      this.value = reason
      setTimeout(() =&gt; {
        this.callbacks.map(callback =&gt; {
          callback.onRejected(reason)
        })
      })
    }
  }

  then(onFulfilled, onRejected) {
    if (typeof onFulfilled === 'function') {
      onFulfilled = () =&gt; this.value
    }

    if (typeof onRejected === 'function') {
      onRejected = () =&gt; this.value
    }

    let promise = new MyPromise((resovle, reject) =&gt; {
      if (this.status === MyPromise.PENDING) {
        this.callbacks.push({
          onFulfilled: value =&gt; {
            this.parse(promise, onFulfilled(value), resovle, reject)
          },
          onRejected: reason =&gt; {
            this.parse(promise, onRejected(reason), resovle, reject)
          }
        })
      }

      if (this.status === MyPromise.FULFILLED) {
        setTimeout(() =&gt; {
          this.parse(promise, onFulfilled(this.value), resovle, reject)
        })
      }

      if (this.status === MyPromise.REJECTED) {
        setTimeout(() =&gt; {
          this.parse(promise, onRejected(this.value), resovle, reject)
        })
      }
    })

    return promise
  }

  parse(promise, result, resovle, reject) {
    if (promise == result) {
      throw TypeError(&quot;Chaining cycle detected for MyPromise&quot;)
    }
    try {
      if (result instanceof MyPromise) {
        result.then(resovle, reject)
        // result.then(value =&gt; {
        //   resovle(result)
        // }, reason =&gt; {
        //   reject(reason)
        // })
      } else {
        resovle(result)
      }
    } catch (error) {
      reject(error)
    }
  }

  static resovle(value) {
    return new MyPromise((resovle, reject) =&gt; {
      if (value instanceof MyPromise) {
        value.then(resovle, reject)
      } else {
        resovle(value)
      }
    })
  }

  static reject(reason) {
    return new MyPromise((resovle, reject) =&gt; {
      reject(reason)
    })
  }

  static all(promises) {
    const values = []
    return new MyPromise((resolve, reject) =&gt; {
      promises.forEach(promise =&gt; {
        promise.then(value =&gt; {
          values.push(value)
          if (values.length === promies.length) {
            resolve()
          }
        }, reason =&gt; {
          reject(reason)
        })
      })
    })
  }

  static race(promises) {
    return new MyPromise((resovle, reject) =&gt; {
      promises.map(promise =&gt; {
        promise.then(value =&gt; {
          resovle(value)
        }, reason =&gt; {
          reject(reason)
        })
      })
    })
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://otirik-handi.github.io/post/hello-gridea/</id>
        <link href="https://otirik-handi.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>